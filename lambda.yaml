AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  LambdaCodeVersion:
    Description: Version identifier
    Type: String

Resources:
#  SourceCodeBucket:
#    Type: 'AWS::S3::Bucket'
#    Properties:
#      BucketName: "code.mlesniak.com"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3ExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 'arn:aws:s3:::code.mlesniak.com/*'

  DemoLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: code.mlesniak.com
        S3Key: !Sub 'src-${LambdaCodeVersion}.zip'
      Runtime: nodejs20.x
      Timeout: 30

  DemoLambdaPublicUrl:
    Type: 'AWS::Lambda::Url'
    Properties:
      AuthType: 'NONE'
      TargetFunctionArn: !GetAtt DemoLambda.Arn

  DemoLambdaPublicPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunctionUrl'
      Principal: '*'
      FunctionUrlAuthType: 'NONE'
      FunctionName: !Ref DemoLambda

  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyAPI
      EndpointConfiguration:
        Types:
          - REGIONAL

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DemoLambda.Arn
      Principal: apigateway.amazonaws.com
      # Optionally, restrict to a specific source ARN if needed:
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/prod/*

  #  GitHubResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !GetAtt MyApiGateway.RootResourceId
#      PathPart: "github"
#      RestApiId: !Ref MyApiGateway

  GitHubMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET  # Choose GET or POST depending on your Lambda's expected method
      ResourceId: !GetAtt MyApiGateway.RootResourceId
#      ResourceId: !Ref GitHubResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST  # This is always POST for Lambda integrations
        Uri: !Sub arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${DemoLambda.Arn}/invocations

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GitHubMethod  # Ensure the method is created before deploying
    Properties:
      RestApiId: !Ref MyApiGateway
      Description: 'My API deployment'
      StageName: prod

Outputs:
  LambdaFunctionName:
    Description: The name of the Lambda function
    Value: !Ref DemoLambda
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt DemoLambda.Arn
  LambdaFunctionUrl:
    Value: !GetAtt DemoLambdaPublicUrl.FunctionUrl
  RestApiId:
    Value: !GetAtt MyApiGateway.RestApiId